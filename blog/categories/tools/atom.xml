<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | 大小云]]></title>
  <link href="http://blog.daxiaoyun.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://blog.daxiaoyun.com/"/>
  <updated>2015-08-04T01:29:50+08:00</updated>
  <id>http://blog.daxiaoyun.com/</id>
  <author>
    <name><![CDATA[Cool Cloud]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ack 2.14 Is a Tool Like Grep, Optimized for Programmers]]></title>
    <link href="http://blog.daxiaoyun.com/blog/20150804/ack/"/>
    <updated>2015-08-04T01:10:00+08:00</updated>
    <id>http://blog.daxiaoyun.com/blog/20150804/ack</id>
    <content type="html"><![CDATA[<p><img src="/images/my/tools/Beyond_grep__ack_2_14__a_source_code_search_tool_for_programmers.png"></p>

<p>今天本地环境 npm 包有点问题，后来知道是本地仓库的版本过久，大家已经不用本地仓库的 npm 包了，使用官方包重新 install 即可。</p>

<p>于是找到了兆博，他劈里啪啦地敲了很多简写的命令，比如：</p>

<p><code>j solar</code> (autojump)</p>

<p><code>g st</code> (git status)</p>

<p><code>npm i -d</code> (npm install –debug)</p>

<p>Amazing，还有 <code>ack</code>，庆幸的是我本地这些都支持，也许我用的 zsh 的缘故吧！感觉好强大。</p>

<p>于是，我看到 <code>ack</code> 的好，决定翻翻它的资料，今天也找资料练习了一番。</p>

<p>以下是翻译的蹩脚的官网的一篇文章“<a href="http://beyondgrep.com/why-ack/">Top 10 reasons to use ack for source code</a>”，使用 ack 搜索源代码的十个理由</p>

<p>作者写的轻松幽默，至少我看着挺幽默的</p>

<p>一、It’s fast 它超快</p>

<p>Ack only searches the stuff that makes sense to search. Perl’s regular expressions are highly optimized.</p>

<p>ack 仅搜索有意义的地方，Perl 的正则表达式被高度优化。</p>

<p>二、 It’s portable 它是可移植的</p>

<p>ack is pure Perl, so it runs on Windows just fine. It has no dependencies other than Perl 5. Installation is a snap.</p>

<p>ack 是纯 Perl 写成，所以它在 Windows 运行得也挺好，除了 Perl 5 它不依赖任何其他东西，安装它啪地一下。</p>

<p>三、It ignores VCS directories 它忽略 VCS 目录</p>

<p>ack searches recursively by default, while ignoring .git, .svn, CVS and other VCS directories.</p>

<p>ack 默认递归搜索，忽略 .git, .svn, CVS 和其他 VCS （版本控制系统）目录。</p>

<p># Which would you rather type?</p>

<p>那个是你喜欢的类型？</p>

<blockquote>
  <table>
    <tbody>
      <tr>
        <td>$ grep pattern $(find . -type f</td>
        <td>grep -v ‘.svn’)</td>
      </tr>
    </tbody>
  </table>

  <p>$ ack pattern</p>
</blockquote>

<p>四、Better search results 更好的搜索结果</p>

<p>Since ack defaults to only searching source code, you get fewer false positives.</p>

<p>因为ack默认只搜索源代码,你得到更少的假阳性（误判，排除了多余的干扰）。</p>

<pre><code>• VCS directories 
VCS 目录
• blib, the Perl build directory
blib，Perl 编译目录
• backup files like foo ~and #foo#
备份文件，比如：foo 和 #foo#
• binary files, core dumps, etc
二进制文件，核心转储文件，等等
</code></pre>

<blockquote>
  <p>core dump又叫核心转储, 当程序运行过程中发生异常, 程序异常退出时, 由操作系统把程序当前的内存状况存储在一个core文件中, 叫core dump.</p>
</blockquote>

<p>五、Easy filetype specifications 容易指定文件类型</p>

<p>If you have a big project with many different languages combined, it’s easy to add –perl to search only Perl files, or use –nohtml to search everything except HTML.</p>

<p>ack’s filetype detection means more than just specifying a single file extension.</p>

<p>如果你有一个大项目，很多不同语言的组合在一起，添加 —perl 参数很容易仅搜索 perl 文件，或者使用 —nohtml 来排除 HTML 文件。</p>

<pre><code># Which would you rather type? 
$ grep pattern 
$(find . -name '*.pl' -or -name '*.pm' -or -name '*.pod' | grep -v .svn)

$ ack --perl pattern
</code></pre>

<p>Plus, ack does filetype detection that find can’t. ack checks the shebang lines of scripts without extensions.</p>

<p>另外，ack 能够检测文件类型，对于没有扩展名的脚本，ack 会检查脚本的 shebang 行（第一行 #! 后面的解释器，根据解释器判定文件类型）</p>

<blockquote>
  <p>在计算机科学中，Shebang（也称为Hashbang）是一个由井号和叹号构成的字符序列（#!），其出现在文本文件的第一行的前两个字符。 在文件中存在Shebang的情况下，类Unix操作系统的程序载入器会分析Shebang后的内容，将这些内容作为解释器指令，并调用该指令，并将载有Shebang的文件路径作为该解释器的参数[1]。
例如，以指令
#!/bin/sh</p>
</blockquote>

<p>六、Creates lists of files without searching 创建文件列表而不搜索</p>

<p>Since ack can know to search only, say, Ruby files with the –ruby switch, you can also generate a list of files in a tree with the -f switch.</p>

<p>话说，ACK 可以仅搜索某一类型的文件， 比如：带 —ruby 开关选项仅搜索 ruby 文件，还可以带 -f 选项只生成一个文件类表，</p>

<pre><code># List all Ruby files in the tree
$ ack -f —python &gt; all-python-files
</code></pre>

<p>七、Match highlighting 匹配结果高亮</p>

<p>ack has flexible match highlighting, where you can specify the colors to use in its output.</p>

<p>ack 有灵活的结果高亮，你能给输出结果指定颜色</p>

<p>八、 Perl regular expressions Perl 正则表达式</p>

<p>Perl leads the programming world with its regular expressions. ack uses Perl’s regular expressions, not a “Perl-compatible” subset.</p>

<p>Perl 的正则表达式引领编程世界，ack 使用 Perl 的正则表达式，不是 Perl 兼容的子集</p>

<p>You can also take advantage of Perl’s match variables. For example, to generate a list of all files #included in your C code, use this:</p>

<p>您还可以利用 Perl 的匹配变量的优势。例如，要生成包含（#include）在C代码的所有文件的列表，用这个：</p>

<p><code>ack --cc '#include\s+&lt;(.*)&gt;' --output '$1' -h</code></p>

<p>九、Command switches much like GNU grep 命令参数很像 GUN grep</p>

<p>If you know GNU grep, you know most of ack’s switches, too. Word-only searching with -w, case-insensitive searching with -i, etc</p>

<p>如果你知道 GNU grep，你也就了解了大多数的 ack 参数，-w 整词匹配，-i 大小写不敏感</p>

<p>十、”ack” is shorter than “grep” to type</p>

<p>This one is sort of a joke, but sort of not. You spend hours every day searching through source code. ack makes it as quick and easy as possible to do that searching and to remove as much drudgerous typing as possible.</p>

<p>一个玩笑的排序，而且没有排序。你每天花时间通过源代码搜索。ack 快速、简单，并尽可能去掉打字的苦差事。</p>

<p>Defaults matter. The less typing you have to do, the better.</p>

<p>别迟疑。少打字，极好的</p>

<p>What are you waiting for?</p>

<p>你还在等什么？</p>

<p>Installation is a snap. Try ack for yourself.</p>

<p>嗖的一下就安装好了，你自己试试 ack</p>

<p><img src="/images/my/tools/ack_beanstalk.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Ulysses 写作]]></title>
    <link href="http://blog.daxiaoyun.com/blog/20150731/ulysses/"/>
    <updated>2015-07-31T00:40:00+08:00</updated>
    <id>http://blog.daxiaoyun.com/blog/20150731/ulysses</id>
    <content type="html"><![CDATA[<p><img src="/images/my/tools/ulysses.png"></p>

<blockquote>
  <p>We believe that writing is about content, about what you want to say – not about fancy formatting. 
我们坚信写作写的是内容，所思所想，而不是花样格式。
— Ulysses for Mac</p>
</blockquote>

<p>正像你看到的，ulysses 官网的一张背景图，午后湖边，搬一张椅子，安静惬意地敲打着文字，行云流水一般，沉浸式地写作。</p>

<h3 id="section">完美的写作工具</h3>

<ol>
  <li>
    <p>Ulysses 是一款具有单一文库的应用程序，您的所有文本都会放在这个单一的文本库中。这里没有“打开”，没有“存储”，没有 Finder 访问 - 一切都只发生在这个窗口中。</p>
  </li>
  <li>
    <p>只要获得您的授权，Ulysses 就可以充分利用 iCloud 来储存您的文本。然后，您可以从所有 Mac 和 iPad 上访问您的文本（可以在家，也可以在旅途中）。只要连网，它们就会自动同步。</p>
  </li>
  <li>
    <p>Ulysses 不提供 WYSIWYG（所见即所得）样式和格式。相反，当您将文本导出为 PDF、网页或 ebook 时它将自动格式化。</p>
  </li>
</ol>

<h3 id="ulysses">初探 Ulysses</h3>
<p>我们首先让您有个大概的了解。这是用户界面概览（从左到右）：</p>

<ul>
  <li>侧边栏</li>
  <li>文稿列表</li>
  <li>编辑器</li>
</ul>

<p>侧边栏的<strong>介绍</strong>组起初想看完之后删掉，但是不能这么做，我想他是觉得 Ulysses 的介绍足够有趣和有用，你随时需要回来看看他的例子，我现在适应了。</p>

<p><code>cmd + 6</code> 快速导出，支持 <code>html</code>、<code>epub</code>、<code>PDF</code>、<code>docx</code>，都美的难以执行，所以我想到完全使用 Ulysses 作为我的写作工具，导出 html 
格式给微信公众号，从这里直接复制到 <strong>Sublime text</strong> 发布到 <strong>github pages</strong>.</p>

<p><code>cmd + 8</code> 太妙了，可以对文档导航，就像目录一样，非常便捷</p>

<p><code>cmd + 9</code> 有一个完整的 <em>markdown</em> 语法列表，很实用，反复练习几遍就都记住了</p>

<h3 id="section-1">跟踪进度</h3>

<p>您是否注意到工具栏中的气压计按钮？ 它提供详细的文本统计。您还可以自定义它们： 撕开面板，并点击齿轮图标。</p>

<p>虽然我觉得这个对我来说没那么有用，我不是写小说的，但是这个设计足够吸引我截个图。</p>

<p><img src="/images/my/tools/track-cycle.png"></p>

<p>制定写作目标后，您可以根据确定的字或字符限值跟踪进度。该文稿的目标是“大约 510 个字符” - 打开附件栏显示它。现在输入一些字。看见吗？</p>

<p>提示： 统计和目标也可以通过其上下文菜单用于整个组。</p>

<h3 id="deadalus-touch">我竟然买过 Deadalus touch</h3>
<p>如果您拥有 [Daedalus Touch] for iOS，并且启用了 iCloud，则可以通过 Ulysses 访问您的书库。它们将作为组显示在此名称的侧边栏中，您可以用 Ulysses 的高级功能继续您在路上已开始的工作。</p>

<h3 id="section-2">爱上写作</h3>

<p>从此爱上写作，每天伴随我到深夜，每天不拉下。</p>

<p>最重要的是，Ulysses 建立在不断发展和适应中。您可以将它作为一个功能全面的记事本，或用它来写您的下一部小说。您可以写您的博客，让一切保持整洁，或随意涂鸦。
这里没有“正确”的方式来使用，您觉得怎么舒服就怎么做吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讨论起来吧]]></title>
    <link href="http://blog.daxiaoyun.com/blog/20150730/disqus/"/>
    <updated>2015-07-30T00:40:00+08:00</updated>
    <id>http://blog.daxiaoyun.com/blog/20150730/disqus</id>
    <content type="html"><![CDATA[<p><img src="/images/my/octopress/disqus/Disqus_–_About_Disqus.png"></p>

<p>搭建博客之后一直准备上一个评论的功能，使用著名的 disqus，今天终于搞定了，原来如此简单。</p>

<p>简单两步搞定</p>

<h3 id="disqus-add-disqus-to-your-site">第一步：注册 disqus 账号，Add Disqus to your site</h3>

<p>我使用 Google 账号，自动注册</p>

<p>开始找不到 Add Disqus to your site，还以为进错地方了，看别人的教程里有一个大大的按钮很醒目，看起来是改版了，我想应该有开发者中心类似的地方，果然在右下角看到了小小的链接，找到了，很喜悦。</p>

<p><img src="/images/my/octopress/disqus/i_found_you.png"></p>

<p>选择一个站点的简短名称，我就用了 daxiaoyun，这样我就可以通过 daxiaoyun.disqus.com 来管理评论了，还能看到统计信息。</p>

<p>Choose your unique Disqus URL
This is where you’ll access moderation tools and site settings. This will also become your site’s “shortname”.</p>

<p><img src="/images/my/octopress/disqus/Disqus___Register_site.png"></p>

<h3 id="octopress">第二步： 配置 octopress</h3>

<p>_config.yaml  （对于引用里的注释#，可以加反斜杠来转义 \#）</p>

<blockquote>
  <p># Disqus Comments</p>

  <p>disqus_short_name: daxiaoyun</p>

  <p>disqus_show_comment_count: true</p>
</blockquote>

<p>博文支持评论设置</p>

<blockquote>
  <p>comments: true</p>
</blockquote>

<p>我自己先评论一条试试。</p>

<p><img src="/images/my/octopress/disqus/the_first_comments.png"></p>

<p>它不仅仅是一个工具，已然成为了社区。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好照片]]></title>
    <link href="http://blog.daxiaoyun.com/blog/20150728/haozhaopian/"/>
    <updated>2015-07-28T23:40:00+08:00</updated>
    <id>http://blog.daxiaoyun.com/blog/20150728/haozhaopian</id>
    <content type="html"><![CDATA[<p>今天推荐一个 mac 上的傻瓜处理图片的软件——好照片</p>

<p><img src="/images/my/tools/haozhaopian.png"></p>

<p>源于高中同学想让我给他代领一张电信卡，但是需要他的身份证，他只能把身份证的正反面都拍给我，我需要拼接，没有 Photoshop 的电脑怎么办？</p>

<p>Google 一下 mac 图片拼接，果然有一个“CollageIt Pro 图片拼接工具 For Mac”，这玩意挺坑爹的，普通版对照片不能做裁剪，我想让放在一起的图片换个角度，不行，很难受，再找，找到了今天的主角——好照片</p>

<h3 id="section">内容提要</h3>

<p>国内高端技术团队倾力打造的首款Mac系统免费图像处理软件。
★简单实用，帮您完成各种照片处理需求；
★5千万级像素大图实时处理，速度更快更出众，秒杀国内外同类产品；</p>

<h3 id="section-1">拼图</h3>

<ol>
  <li>标准模板</li>
  <li>图片拼接</li>
  <li>自由拼接（我用了这个，因为标准模板没有上下结构的）</li>
</ol>

<h3 id="section-2">移轴（很酷的功能，晚上再写这个文章的时候，试了试，原本想虚化一下我同学的照片）</h3>

<p>通过线性和径向两种方式来虚化，意思时可以保留一个线性或径向的地方不虚，我使用了径向，最大的光圈，不敏感的信息保持了原来的本色。</p>

<p>最终的效果，还不错</p>

<p><img src="/images/my/tools/linsi.png"></p>

<p>今天还发现了一个想玩游戏一样学编程的<a href="http://www.checkio.org/mission/non-unique-elements/">网站</a>，，我喜欢玩中学，我更羡慕玩游戏玩的出神入化的人。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端录屏神器]]></title>
    <link href="http://blog.daxiaoyun.com/blog/20150727/terminal-record-tool/"/>
    <updated>2015-07-27T23:30:00+08:00</updated>
    <id>http://blog.daxiaoyun.com/blog/20150727/terminal-record-tool</id>
    <content type="html"><![CDATA[<p><img src="/images/my/tools/asciinema_-_Record_and_share_your_terminal_sessions__the_right_way.png"></p>

<p>源于今天的一次讨论（QQ群里）</p>

<p>我上午提了一下</p>

<blockquote>
  <p>这里应该使用 INCR 方法比较好吧？这种写法总数可能不准
user_count = get_savings_users()
mc.set(MC_ZHIWANG_SAVINGS_USERS, int(user_count) + 1)</p>
</blockquote>

<p>paul</p>

<blockquote>
  <p>我们的set方法是封装过的。。。 
所以没法直接用INCR</p>
</blockquote>

<p>tonyseek</p>

<blockquote>
  <p>其实是打算以后把持久化的 rds 和 mc 分开实例的
mc 要不要换成真 mc 也是讨论过的事情 ¬ ¬（感觉点燃了什么）
吼啊，给 solar-cache 提个 MR 嘛，然后 at guojing review（在大家反复提到 MR 
这个动作时，我后来真的做了）</p>
</blockquote>

<p>放开那个西红柿㍿  （光看名字就知道他有多逗比，确实很逗）</p>

<blockquote>
  <p>solar-cache 可以提 mr。
因为我们的对象是 pickle 过的，之前 int 型没有单独处理，所以只能+1来做。可以改一下。
所以当时我加了一个 self._pickle，这个父类实现是什么都不做。继承后的 GHRedis 做了 
pickle，其实完全也可以用父类，就不会有 pickle 问题了，不过这样存对象也麻烦。而且写那么多 
redis 的具体实现，外面用哪个也是问题。。
（关于 pickle 是啥？我直接问了，tony 回复是 Python 
内置的对象序列化，问问题也不丢人，反而获益颇丰）</p>
</blockquote>

<p>tonyseek</p>

<blockquote>
  <p>是的，这个 mc 当初就打算当 mc 用，是我们业务代码里的用法比较简单粗暴了 ¬ ¬
持久化数据应该用单独的 rds 实例的</p>
</blockquote>

<p>放开那个西红柿㍿</p>

<blockquote>
  <p>不过自己重载一下 redis 的 incr 应该比较简单，只是一直没有人做，因为大家都无所谓。。万年 
TODO 了。。
你可以提个 mr，我觉得不是很难，哈哈，试试看。</p>
</blockquote>

<p>还有另外一个问题也得到了充分的回答，关于 blinker signal  是同步的吗？</p>

<p>我总结：</p>

<blockquote>
  <p>很好的学习机会，多提问，提有质量的问题，引发讨论。
之前一直也不敢怎么提，就是怕提出太弱智的问题，现在全面深入之后，要爆发了。</p>
</blockquote>

<p>吃饭后我就在 solar-cache 提个 MR，看到了 solar-cache 发布版本是这样的</p>

<p><strong>发布版本</strong></p>

<p><code>
$ bumpversion minor  # 或 bumpversion patch
$ git push --tags upstream master
$ python setup.py sdist bdist_wheel
$ devpi upload dist/*
</code></p>

<p>题外话：偶然知道了 Evernote 添加 checkbox 的快捷键，opt + 回车 ，重复执行此快捷键，会切换选中状态，好玩</p>

<p>于是准备去看看 bumpversion 是个什么东东？</p>

<p>看到了这个<a href="https://asciinema.org/a/3828">视频</a></p>

<p>很好奇，这个视频的做法，其实是点了一下导航条的 docs 想看看关于 bumpversion 的文档，但是它给了我 asciinema 的<a href="https://asciinema.org/docs">文档</a>，简洁的命令使用了brew 瞬间吸引了我，</p>

<p>但是，安装失败了，Error: Failed to download resource “go—gotools”，再试一次，不行，上VPN试试，直接 clone 可以啊（在 VPN 还没有连上时），再试一次</p>

<blockquote>
  <p>git clone https://go.googlesource.com/tools.git /Library/Caches/Homebrew/go–gotools–git</p>
</blockquote>

<p>点击<a href="https://asciinema.org/browse/featured">这里</a>欣赏一下极客们是怎么玩终端的吧？</p>

<p>今天老婆做了疙瘩汤，有段时间没吃了，我吃了两碗。</p>
]]></content>
  </entry>
  
</feed>
